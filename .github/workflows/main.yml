name: Node.js CI/CD

on:
  push:
    branches: [ main ]
  pull_request:
    branches: [ main ]

jobs:
  build-and-deploy:
    runs-on: ubuntu-latest

    env:
      # Variables
      PORT: ${{ vars.PORT }}
      MONGODB_URI: ${{ vars.MONGODB_URI }}
      JWT_SECRET: ${{ vars.JWT_SECRET }}
      AWS_IOT_ENDPOINT: ${{ vars.AWS_IOT_ENDPOINT }}
      EMAIL_USER: ${{ vars.EMAIL_USER }}
      EMAIL_PASS: ${{ vars.EMAIL_PASS }}
      UNWIRED_API_TOKEN: ${{ vars.UNWIRED_API_TOKEN }}
      BASE_URL: ${{ vars.BASE_URL }}
      EVENTS_TOPIC: ${{ vars.EVENTS_TOPIC }}
      CONFIG_TOPIC: ${{ vars.CONFIG_TOPIC }}
      SENSOR_TOPIC: ${{ vars.SENSOR_TOPIC }}
      
      # Secrets
      AWS_ACCESS_KEY_ID: ${{ secrets.AWS_ACCESS_KEY_ID }}
      AWS_SECRET_ACCESS_KEY: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
      AWS_REGION: ${{ secrets.AWS_REGION }}

    steps:
    - uses: actions/checkout@v2

    - name: Setup Node.js
      uses: actions/setup-node@v2
      with:
        node-version: '20.x'

    - name: Cache dependencies
      uses: actions/cache@v2
      with:
        path: ~/.npm
        key: ${{ runner.os }}-node-${{ hashFiles('**/package-lock.json') }}
        restore-keys: |
          ${{ runner.os }}-node-

    - name: Install dependencies
      run: npm ci

    - name: Create env file
      run: |
        # Using variables
        echo "PORT=${{ vars.PORT }}" >> .env
        echo "MONGODB_URI=${{ vars.MONGODB_URI }}" >> .env
        echo "JWT_SECRET=${{ vars.JWT_SECRET }}" >> .env
        echo "AWS_IOT_ENDPOINT=${{ vars.AWS_IOT_ENDPOINT }}" >> .env
        echo "EMAIL_USER=${{ vars.EMAIL_USER }}" >> .env
        echo "EMAIL_PASS=${{ vars.EMAIL_PASS }}" >> .env
        echo "UNWIRED_API_TOKEN=${{ vars.UNWIRED_API_TOKEN }}" >> .env
        echo "BASE_URL=${{ vars.BASE_URL }}" >> .env
        echo "EVENTS_TOPIC=${{ vars.EVENTS_TOPIC }}" >> .env
        echo "CONFIG_TOPIC=${{ vars.CONFIG_TOPIC }}" >> .env
        echo "SENSOR_TOPIC=${{ vars.SENSOR_TOPIC }}" >> .env

    - name: Run tests
      run: |
        npm test || exit 0

    - name: Deploy to EC2
      env:
        AWS_ACCESS_KEY_ID: ${{ secrets.AWS_ACCESS_KEY_ID }}
        AWS_SECRET_ACCESS_KEY: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
        AWS_REGION: ${{ secrets.AWS_REGION }}
      run: |
        # Install SSH client
        sudo apt-get update
        sudo apt-get install -y openssh-client

        # Setup SSH key
        mkdir -p ~/.ssh
        echo "${{ secrets.EC2_SSH_KEY }}" > ~/.ssh/deploy_key
        chmod 600 ~/.ssh/deploy_key
        
        # Add host key checking
        echo "StrictHostKeyChecking no" >> ~/.ssh/config

        # Deploy using rsync
        rsync -avz -e "ssh -i ~/.ssh/deploy_key" \
          --exclude 'node_modules' \
          --exclude '.git' \
          --exclude '.github' \
          ./ ${{ secrets.EC2_USERNAME }}@${{ secrets.EC2_HOST }}:/home/${{ secrets.EC2_USERNAME }}/app/

        # SSH into instance and restart application
        ssh -i ~/.ssh/deploy_key ${{ secrets.EC2_USERNAME }}@${{ secrets.EC2_HOST }} '
          cd ~/app
          npm install
          pm2 restart server || pm2 start server.js
        '

    - name: Verify Deployment
      if: success()
      run: |
        echo "üöÄ Deployment completed successfully!"
        echo "Application deployed to ${{ secrets.EC2_HOST }}"

    - name: Deployment Failed
      if: failure()
      run: |
        echo "‚ùå Deployment failed!"
        echo "Check the logs above for more details"